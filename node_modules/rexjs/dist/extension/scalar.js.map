{"version":3,"sources":["extension/scalar.ts"],"names":[],"mappings":"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","file":"extension/scalar.js","sourcesContent":["/**\r\n * Created by Greg on 01/10/2016.\r\n */\r\nimport _ =require('lodash');\r\nimport {ReflectHelper} from '../reflection';\r\nimport {RexScalar, ScalarChange} from '../rexes/scalar'\r\nimport {Conversion, RexConvert} from \"../rexes/scalar/convert\";\r\nimport {RexNames} from \"../rexes/names\";\r\nimport {RexEvent} from \"../events/rex-event\";\r\nimport {RexNotify} from \"../rexes/scalar/notify\";\r\nimport {RexSilence} from \"../rexes/scalar/silence\";\r\nimport {RexMember} from \"../rexes/scalar/member\";\r\nimport {RexRectify, Rectifier} from \"../rexes/scalar/rectify\";\r\nimport {RexLink} from \"../rexes/scalar/link\";\r\nimport {RexListen} from \"../rexes/scalar/listen\";\r\n/**\r\n * This file contains \"extension methods\" for RexScalar objects.\r\n */\r\n\r\ndeclare module '../rexes/scalar' {\r\n\texport interface RexScalar<T> {\r\n\t\t/**\r\n\t\t * Applies a forward and back conversion to this Rex, returning a Convert rex.\r\n\t\t * @param conversion The conversion object.\r\n\t\t */\r\n\t\tconvert_<TTo>(conversion : Conversion<T, TTo>) : RexScalar<TTo>;\r\n\r\n\t\t/**\r\n\t\t * Applies a forward and back conversion to this Rex, returning a Convert rex.\r\n\t\t * @param to The function used to convert outwards. If falsy/omitted, the Rex will not support reading.\r\n\t\t * @param from The function used to convert inwards. If falsy/omitted, the Rex will not support writing.\r\n\t\t */\r\n\t\tconvert_<TTo>(to ?: (from : T) => TTo, from ?: (to : TTo) => T)  : RexScalar<TTo>;\r\n\r\n\t\t/**\r\n\t\t * Applies an assymetric conversion:\r\n\t\t * Forward conversion will use the {to} function.\r\n\t\t * Back conversion will use the {rectifier} function. Here, the {current} parameter is a clone of the current value of this Rex and the {to} parameter is the coerced value. Mutate the {current} parameter to rectify the two values.\r\n\t\t * @param to The forward conversion function.\r\n\t\t * @param rectifier The backward mutation function.\r\n\t\t */\r\n\t\trectify_<TTo>(to ?: (from : T) => TTo, rectifier ?: (current : T, to : TTo) => void) : RexScalar<TTo>;\r\n\r\n\t\trectify_<TTo>(rectifier : Rectifier<T, TTo>);\r\n\t\t/**\r\n\t\t * Gets the member of the specified name from the Rex.\r\n\t\t * In the back conversion, the current value is cloned and the clone's member is set. Then this rex is updated with the new object.\r\n\t\t * @param name The name of the member to get.\r\n\t\t */\r\n\t\tmember_<TTo>(name : string)  : RexScalar<TTo>;\r\n\r\n\t\tmember_<TTo>(accessFunction : (v : T) => TTo) : RexScalar<TTo>;\r\n\r\n\t\t/**\r\n\t\t * Applies a Silencer Rex that suppresses change notifications that match a certain criterion.\r\n\t\t * This does not change the value of the Rex.\r\n\t\t * @param silencer\r\n\t\t */\r\n\t\tsilence_(silencer ?: (change : ScalarChange<T>) => boolean) : RexScalar<T>;\r\n\r\n\t\t/**\r\n\t\t * Applies a linking Rex that mirrors this Rex.\r\n\t\t * Used to manage event subscriptions.\r\n\t\t */\r\n\t\tlink_() : RexScalar<T>;\r\n\r\n\t\t/**\r\n\t\t * Creates a Rex that monitors an external event for change notification.\r\n\t\t * @param eventGetter A function that, given a change notification, constructs an event that can be used to listen for hidden changes.\r\n\t\t */\r\n\t\tnotify_(eventGetter : (change : ScalarChange<T>) => RexEvent<any>) : RexScalar<T>;\r\n\r\n\t\t/**\r\n\t\t * Creates a Rex that monitors an external event for change notification.\r\n\t\t * @param event An event that, when fired, means a change in the Rex may have occurred.\r\n\t\t */\r\n\t\tnotify_(event : RexEvent<void>) : RexScalar<T>;\r\n\r\n\t\t/**\r\n\t\t * Attaches an array of listeners to the Rex and returns it.\r\n\t\t * @param listeners The listeners to attach.\r\n\t\t */\r\n\t\tlisten_(...listeners : ((change : ScalarChange<T>) => void)[]);\r\n\r\n\t\t/**\r\n\t\t * Clones the value and applies a mutation on the clone, then updates the Rex with it.\r\n\t\t * @param mutation The mutation.\r\n\t\t */\r\n\t\tmutate(mutation : (copy : T) => void) : void;\r\n\r\n\t\t/**\r\n\t\t * Takes a function that updates the current value of the Rex to another value.\r\n\t\t * @param reducer The reducer.\r\n\t\t */\r\n\t\treduce(reducer : (current : T) => T) : void;\r\n\t}\r\n}\r\n\r\nabstract class RexScalarExtensions<T> extends RexScalar<T> {\r\n\tconvert_<TTo>( arg1 ?: any, arg2 ?: any) : RexScalar<TTo> {\r\n\t\tif (_.isFunction(arg1) || _.isFunction(arg2)) {\r\n\t\t\treturn new RexConvert<T, TTo>(this, {to: arg1, from: arg2});\r\n\t\t} else if (!arg1 && !arg2) {\r\n\t\t\tthrow new TypeError(\"failed to match any overload for 'convert'.\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new RexConvert<T, TTo>(this, arg1 as Conversion<T, TTo>);\r\n\t\t}\r\n\t}\r\n\r\n\tlink_() : RexScalar<T> {\r\n\t\treturn new RexLink(this);\r\n\t}\r\n\r\n\trectify_( arg1 ?: any, arg2 ?: any)  {\r\n\t\tif (_.isFunction(arg1)) {\r\n\t\t\treturn new RexRectify(this, {\r\n\t\t\t\tto : arg1,\r\n\t\t\t\trectify : arg2\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\treturn new RexRectify(this, arg1);\r\n\t\t}\r\n\t}\r\n\r\n\tmember_<T extends Object, TTo>( memberName : string | ((x : T) => TTo)) : any {\r\n\t\tif (!memberName) {\r\n\t\t\treturn this.link_();\r\n\t\t}\r\n\t\tif (_.isFunction(memberName)) {\r\n\t\t\tmemberName = ReflectHelper.getMemberName(memberName)\r\n\t\t}\r\n\t\treturn new RexMember<TTo>(this, memberName);\r\n\t}\r\n\r\n\tnotify_( eventOrEventGetter : RexEvent<void> | ((change : ScalarChange<T>) => RexEvent<void>)) : RexScalar<T> {\r\n\t\tif (!eventOrEventGetter) {\r\n\t\t\treturn this.link_();\r\n\t\t}\r\n\t\telse if (eventOrEventGetter instanceof RexEvent) {\r\n\t\t\treturn new RexNotify(this, x => eventOrEventGetter);\r\n\t\t} else if (_.isFunction(eventOrEventGetter)) {\r\n\t\t\treturn new RexNotify(this, eventOrEventGetter);\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(`Failed to resolve overload of notify_: ${eventOrEventGetter} is not a function or an event.`)\r\n\t\t}\r\n\t}\r\n\r\n\tsilence_( silencer ?: (change : ScalarChange<T>) => boolean) {\r\n\t\treturn new RexSilence<T>(this, silencer);\r\n\t}\r\n\r\n\tlisten_( ...callbacks : ((change : ScalarChange<T>) => void)[]) {\r\n\t\tlet allCallbacks = (change : ScalarChange<T>) => {\r\n\t\t\tcallbacks.forEach(f => f(change));\r\n\t\t};\r\n\t\tthis.changed.on(allCallbacks);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tmutate(this :RexScalar<T>, mutation : (copy : T) => void) : void {\r\n\t\tlet copy = _.cloneDeep(this.value);\r\n\t\tmutation(copy);\r\n\t\tthis.value = copy;\r\n\t}\r\n\r\n\treduce( reducer : (current : T) => T) {\r\n\t\tthis.value = reducer(this.value);\r\n\t}\r\n}\r\n\r\nReflectHelper.mixin(RexScalar, RexScalarExtensions);"],"sourceRoot":"/src"}