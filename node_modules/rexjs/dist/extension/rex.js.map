{"version":3,"sources":["extension/rex.ts"],"names":[],"mappings":";AAAA,oBAAqB,qBAAqB,CAAC,CAAA;AAC3C,qBAAkB,eAAe,CAAC,CAAA;AAClC,sBAAwB,uBAAuB,CAAC,CAAA;AAChD,yBAA0B,0BAA0B,CAAC,CAAA;AACrD;;GAEG;AAEH;;GAEG;AACH,IAAc,KAAK,CAsBlB;AAtBD,WAAc,KAAK,EAAC,CAAC;IACpB;;;;OAIG;IACH,cAAwB,OAAW;QAClC,MAAM,CAAC,IAAI,YAAM,CAAI,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAFe,UAAI,OAEnB,CAAA;IAED;;;;OAIG;IACH,gBAA0B,KAAS;QAClC,MAAM,CAAC,IAAI,YAAM,CAAI,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAFe,YAAM,SAErB,CAAA;IAED,mBAA6B,MAAgB,EAAE,OAA8B;QAC5E,MAAM,CAAC,IAAI,sBAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAFe,eAAS,YAExB,CAAA;AACF,CAAC,EAtBa,KAAK,GAAL,aAAK,KAAL,aAAK,QAsBlB;AAED;;GAEG;AACH,IAAc,QAAQ,CAkBrB;AAlBD,WAAc,QAAQ,EAAC,CAAC;IACvB;;;;OAIG;IACH,eAAsB,CAAO;QAC5B,MAAM,CAAC,CAAC,YAAY,UAAG,CAAC;IACzB,CAAC;IAFe,cAAK,QAEpB,CAAA;IAED;;;OAGG;IACH,kBAAyB,CAAO;QAC/B,MAAM,CAAC,CAAC,YAAY,iBAAS,CAAC;IAC/B,CAAC;IAFe,iBAAQ,WAEvB,CAAA;AAEF,CAAC,EAlBa,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAkBrB","file":"extension/rex.js","sourcesContent":["import {RexVar} from \"../rexes/scalar/var\";\r\nimport {Rex} from \"../rexes/base\";\r\nimport {RexScalar} from \"../rexes/scalar/index\";\r\nimport {RexComputed} from \"../rexes/scalar/computed\";\r\n/**\r\n * Created by Greg on 02/10/2016.\r\n */\r\n\r\n/**\r\n * Module for constructing various rexjs objects.\r\n */\r\nexport module Rexes {\r\n\t/**\r\n\t * Constructs a Var Rex object, which is backed by a variable, and supports both reading and writing.\r\n\t * @param initial The initial value of the Var.\r\n\t * @returns {RexVar<T>} The Var object.\r\n\t */\r\n\texport function var_<T>(initial : T) : RexScalar<T> {\r\n\t\treturn new RexVar<T>(initial, true, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a Const Rex object, which is like a Var, but writing to it throws an error.\r\n\t * @param value The value of the Const.\r\n\t * @returns {RexVar<T>}\r\n\t */\r\n\texport function const_<T>(value : T) : RexScalar<T> {\r\n\t\treturn new RexVar<T>(value, true, false);\r\n\t}\r\n\r\n\texport function computed_<T>(onRead : () => T, onWrite ?: (input : T) => void) {\r\n\t\treturn new RexComputed(onRead, onWrite);\r\n\t}\r\n}\r\n\r\n/**\r\n * Module for reflecting over rexjs objects.\r\n */\r\nexport module Rexflect {\r\n\t/**\r\n\t * Returns true if the argument is a Rex object, i.e. an instanceof {Rex}.\r\n\t * @param x The object to test.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isRex(x : any) : x is Rex<any> {\r\n\t\treturn x instanceof Rex;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the argument is a scalar rex object, i.e. an instanceof {RexScalar}.\r\n\t * @param x The object to test.\r\n\t */\r\n\texport function isScalar(x : any) : x is RexScalar<any> {\r\n\t\treturn x instanceof RexScalar;\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":"/src"}