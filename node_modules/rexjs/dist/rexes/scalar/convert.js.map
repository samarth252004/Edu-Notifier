{"version":3,"sources":["rexes/scalar/convert.ts"],"names":[],"mappings":";;;;;;AAAA,iBAA2C,IAAI,CAAC,CAAA;AAEhD,sBAAuB,UAAU,CAAC,CAAA;AAClC,uBAAqB,cAAc,CAAC,CAAA;AAWpC,qFAAqF;AACrF,uCAAuC;AACvC,IAAI,OAAO,GAAG,EAAS,CAAC;AAExB;IAA4C,8BAAc;IASzD,oBACS,MAAyB,EAAU,UAAmC;QAVhF,iBAqDC;QA1CC,iBAAO,CAAC;QADA,WAAM,GAAN,MAAM,CAAmB;QAAU,eAAU,GAAV,UAAU,CAAyB;QATvE,UAAK,GAAS,OAAO,CAAC;QAE9B,SAAI,GAAc;YACjB,IAAI,EAAG,gBAAQ,CAAC,OAAO;YACvB,IAAI,EAAG,IAAI;YACX,UAAU,EAAG,IAAI;SACjB,CAAC;QAKD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QAE7B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YACnC,IAAI,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC;YACzB,KAAI,CAAC,KAAK,GAAG,OAAO,CAAC;YACrB,KAAI,CAAC,YAAY,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,sBAAI,6BAAK;aAAT;YACC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;gBAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC3B,MAAM,eAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,CAAC;gBACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACpD,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;aAED,UAAU,GAAS;YAAnB,iBAcC;YAbA,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzB,MAAM,eAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC;YACD,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;YACzB,8BAA8B;YAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC;YACR,CAAC;YACD,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;YACjB,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,EAA1B,CAA0B,CAAC,CAAC;YAC9D,IAAI,CAAC,YAAY,EAAE,CAAC;QACrB,CAAC;;;OAhBA;IAkBD,0BAAK,GAAL;QACC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,gBAAK,CAAC,KAAK,WAAE,CAAC;IACf,CAAC;IACF,iBAAC;AAAD,CArDA,AAqDC,CArD2C,YAAS,GAqDpD;AArDY,kBAAU,aAqDtB,CAAA","file":"rexes/scalar/convert.js","sourcesContent":["import {IScalarChangeInfo, RexScalar} from \"./\";\r\nimport {Rex, IRexInfo} from \"../base\";\r\nimport {RexNames} from \"../names\";\r\nimport {Errors} from '../../errors';\r\nimport {Subscription} from \"../../\";\r\n/**\r\n * Created by Greg on 01/10/2016.\r\n */\r\n\r\nexport interface Conversion<TFrom, TTo> {\r\n\tfrom ?: (to : TTo) => TFrom;\r\n\tto ?: (to : TFrom) => TTo;\r\n}\r\n\r\n//instead of using undefined to signify a dirty cached value, we use a special token,\r\n//because 'undefined' is a valid value.\r\nlet missing = {} as any;\r\n\r\nexport class RexConvert<TFrom, TTo> extends RexScalar<TTo> {\r\n\tprivate _last : TTo = missing;\r\n\tprivate _parentSub : Subscription;\r\n\tinfo : IRexInfo = {\r\n\t\ttype : RexNames.Convert,\r\n\t\tlazy : true,\r\n\t\tfunctional : true\r\n\t};\r\n\r\n\tconstructor(\r\n\t\tprivate parent : RexScalar<TFrom>, private conversion : Conversion<TFrom, TTo>) {\r\n\t\tsuper();\r\n\t\tthis.depends.source = parent;\r\n\r\n\t\tthis._parentSub = parent.changed.on(() => {\r\n\t\t\tlet lastVal = this._last;\r\n\t\t\tthis._last = missing;\r\n\t\t\tthis.notifyChange();\r\n\t\t});\r\n\t}\r\n\r\n\tget value() {\r\n\t\tthis.makeSureNotClosed();\r\n\t\tif (this._last === missing) {\r\n\t\t\tif (!this.conversion.from) {\r\n\t\t\t\tthrow Errors.cannotRead(this.meta.name);\r\n\t\t\t}\r\n\t\t\tthis._last = this.conversion.to(this.parent.value);\r\n\t\t}\r\n\t\treturn this._last;\r\n\t}\r\n\r\n\tset value(val : TTo) {\r\n\t\tthis.makeSureNotClosed();\r\n\t\tif (!this.conversion.to) {\r\n\t\t\tthrow Errors.cannotWrite(this.meta.name);\r\n\t\t}\r\n\t\tlet prevVal = this._last;\r\n\t\t//use Object.is in case of NaN\r\n\t\tif (Object.is(prevVal, val)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._last = val;\r\n\t\tlet newVal = this.conversion.from(val);\r\n\t\tthis._parentSub.freezeWhile(() => this.parent.value = newVal);\r\n\t\tthis.notifyChange();\r\n\t}\r\n\r\n\tclose() {\r\n\t\tif (this.isClosed) return;\r\n\t\tthis._parentSub.close();\r\n\t\tsuper.close();\r\n\t}\r\n}"],"sourceRoot":"/src"}