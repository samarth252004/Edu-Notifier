{"version":3,"sources":["events/rex-event.ts"],"names":[],"mappings":";AAAA;;GAEG;AACH,IAAO,CAAC,WAAW,QAAQ,CAAC,CAAC;AAC7B,6BAA2B,gBAAgB,CAAC,CAAA;AAE5C;;;GAGG;AAEH,IAAM,SAAS,GAAG,uBAAuB,CAAC;AAC1C;IAEC;;;;OAIG;IACH,kBAAoB,KAAwB;QAAhC,qBAAgC,GAAhC,eAAgC;QAAxB,UAAK,GAAL,KAAK,CAAmB;QANpC,eAAU,GAAG,EAAE,CAAC;IAQxB,CAAC;IAMD,sBAAI,0BAAI;QAJR;;;WAGG;aACH;YACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;;;OAAA;IAGD;;;;;;OAMG;IACH,qBAAE,GAAF,UAAqB,OAA2C;QAAhE,iBAkBC;QAjBA,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAgC,CAAC;QACrC,EAAE,CAAC,CAAC,OAAO,YAAY,QAAQ,CAAC,CAAC,CAAC;YACjC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,YAAY,GAAG,OAAO,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,IAAI,SAAS,CAAC,iCAA+B,OAAO,sCAAmC,CAAC,CAAC;QAChG,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACnC,MAAM,CAAC,IAAI,2BAAY,CAAC;YACvB,KAAK,EAAE;gBACN,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YACvC,CAAC;YACD,MAAM,EAAG,cAAM,OAAA,YAAY,CAAC,SAAS,CAAC,GAAG,IAAI,EAA9B,CAA8B;YAC7C,QAAQ,EAAG,cAAM,OAAA,YAAY,CAAC,SAAS,CAAC,GAAG,SAAS,EAAnC,CAAmC;SACpD,CAAC,CAAC;IACJ,CAAC;IACD;;;OAGG;IACH,uBAAI,GAAJ,UAAK,GAAY;QAChB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,CAAC;YACxB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC,CAAC,GAAG,CAAC,CAAC;YACR,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,wBAAK,GAAL;QACC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,2BAAQ,GAAR;QACC,MAAM,CAAC,sBAAoB,IAAI,CAAC,IAAI,MAAG,CAAC;IACzC,CAAC;IACF,eAAC;AAAD,CApEA,AAoEC,IAAA;AApEY,gBAAQ,WAoEpB,CAAA","file":"events/rex-event.js","sourcesContent":["/**\r\n * Created by Greg on 01/10/2016.\r\n */\r\nimport _ = require('lodash');\r\nimport {Subscription} from './subscription';\r\nimport {SemiWeakMap} from \"../collections\";\r\n/**\r\n * An event primitive used in the rexjs library. Allows the ability to subscribe to notifications.\r\n *\r\n */\r\n\r\nconst freezeKey = \"rexjs:RexEvent-frozen\";\r\nexport class RexEvent<TParam> {\r\n\tprivate _invocList = [];\r\n\t/**\r\n\t * Constructs a new instance of the @RexEvent.\r\n\t * @constructor\r\n\t * @param _name A human-readable name for the event. Optional.\r\n\t */\r\n\tconstructor(private _name : string = \"Event\") {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the human-readable name for the event.\r\n\t * @returns {string}\r\n\t */\r\n\tget name() {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Attaches a handler to this event or subscribes to it. When the event will fire it will also fire the handler.\r\n\t * If the handler is a function, it's called, and if it's an event, it's fired.\r\n\t * @param handler The handler, which can be another event or a function.\r\n\t * @param strong Whether the handler is registered as a weak or strong handler.\r\n\t * @returns {Subscription} A token that supports a close() method, upon which this subscription is cancelled.\r\n\t */\r\n\ton<S extends TParam>(handler : ((arg : S) => void) | RexEvent<S>) : Subscription {\r\n\t\tlet handlerKey = {};\r\n\t\tlet finalHandler : (arg : S) => void;\r\n\t\tif (handler instanceof RexEvent) {\r\n\t\t\tfinalHandler = handler.fire.bind(handler);\r\n\t\t} else if (_.isFunction(handler)) {\r\n\t\t\tfinalHandler = handler;\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(`Failed to resolve overload: ${handler} is not a RexEvent or a function.`);\r\n\t\t}\r\n\t\tthis._invocList.push(finalHandler);\r\n\t\treturn new Subscription({\r\n\t\t\tclose: () => {\r\n\t\t\t\t_.pull(this._invocList, finalHandler);\r\n\t\t\t},\r\n\t\t\tfreeze : () => finalHandler[freezeKey] = true,\r\n\t\t\tunfreeze : () => finalHandler[freezeKey] = undefined\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * Fires the event. This method's visibility is not restricted, but it should be used carefully.\r\n\t * @param arg The argument with which the event is raised.\r\n\t */\r\n\tfire(arg : TParam) {\r\n\t\tthis._invocList.forEach(f => {\r\n\t\t\tif (!f[freezeKey]) {\r\n\t\t\t\tf(arg);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the event's subscription list. Use this method carefully.\r\n\t */\r\n\tclear() {\r\n\t\tthis._invocList = [];\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn `[object RexEvent ${this.name}]`;\r\n\t}\r\n}"],"sourceRoot":"/src"}