/**
 * Created by Greg on 14/10/2016.
 */
import _ = require('lodash');
export class SemiWeakMap<T> {
	private _keys : Object[] = [];
	private _weakMap = new WeakMap<Object, T>();

	constructor() {

	}

	set(key : Object, value : T) {
		if (!this._keys.includes(key)){
			this._keys.push(key);
		}
		this._weakMap.set(key, value);
	}

	clear() {
		this._keys = [];
		this._weakMap = new WeakMap<Object, T>();
	}

	remove(key : Object) {

		if (this._weakMap.delete(key)) {
			_.pull(this._keys, key);
		}
	}

	get(key : Object) {
		return this._weakMap.get(key);
	}

	forEach(f : (obj : T) => void) {
		let toRemove = [];
		for (let key of this._keys.slice(0)) {
			let wValue = this._weakMap.get(key);
			if (wValue) {
				f(wValue);
			} else {
				toRemove.push(key);
			}
		}
		_.pull(this._keys, ...toRemove);
	}

}